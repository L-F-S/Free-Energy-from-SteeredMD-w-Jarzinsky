#############################################################
## JOB DESCRIPTION                                         ##
#############################################################

# SMD simulation (stretching) of 1APS	 in vacuum
# Constant temperature

#############################################################
## ADJUSTABLE PARAMETERS                                   ##
#############################################################

set outname        aps_0005_134

set pdbname        aps_start_134.pdb


structure          aps.psf
coordinates        inputs/$pdbname
outputName         out/0005/$outname

set temperature    310

#############################################################
## SIMULATION PARAMETERS                                   ##
#############################################################

# Input
paraTypeCharmm	    on
parameters          par_all36_prot.prm
temperature         $temperature

# Force-Field Parameters
exclude             scaled1-4
1-4scaling          1.0
cutoff              12.0
switching           on
switchdist          10.0  ;# cutoff -2
pairlistdist        14.0  ;# cutoff +2

# Integrator Parameters
timestep            2.0  ;# 2fs/step
rigidBonds          all  ;# needed for 2fs steps
nonbondedFreq	    1    ;# caculate nonbonded forces every step
fullElectFrequency  2    ;# calculate full electrostatics every other step
stepspercycle       10    

# Constant Temperature Control
langevin            on    ;# do langevin dynamics
langevinDamping     1     ;# damping coefficient (gamma) of 1/ps
langevinTemp        $temperature
langevinHydrogen    no    ;# don't couple langevin bath to hydrogens

# Output
restartfreq          500
binaryoutput        no
dcdfreq             500     ;# 500steps = every 1ps
outputEnergies      100     ;# 100 steps = every 0.2 ps

#############################################################
## EXTRA PARAMETERS                                        ##
#############################################################

# Tcl interface
tclForces           on
set targetAtomPdb   inputs/$pdbname
tclForcesScript     {

# Atoms selected for force application

set id1 [atomid U 1 CA]
set grp1 {}
lappend grp1 $id1
set a1 [addgroup $grp1]

set id2 [atomid U 98 CA]
set grp2 {}
lappend grp2 $id2
set a2 [addgroup $grp2]

# set the output frequency, initialize the time counter
set Tclfreq 50
set t 0


# extract coordinates of ser and tyr from targetpdb
set SerCA {}
set TyrCA {}

# aprire il pdb
set inStream [open $targetAtomPdb r]

# leggere il pdb line by line
foreach line [split [read $inStream] \n] {

# se le lettere nella riga (le colonne se vuoi) da 7 a 11 , trimmata, vale 5 ,
# estrai le coordinate di SerCA (riferisciti al formato pdb per sapere dove sono)

if {[string trim [string range $line 7 11]] == 5} {
	lappend SerCA [string trim [string range $line 31 38]]
	lappend SerCA [string trim [string range $line 39 46]]
	lappend SerCA [string trim [string range $line 47 54]]

# se valgono 1530, estrai le coordinate di TyrCA

} elseif {[string trim [string range $line 7 11]] == 1530} {
	lappend TyrCA [string trim [string range $line 31 38]]
	lappend TyrCA [string trim [string range $line 39 46]]
	lappend TyrCA [string trim [string range $line 47 54]]
}
}

# assegna le coordinate dei due atomi al momento iniziale
# ai constraint points iniziali

# N-term Calpha (Ser).

set c1x [lindex $SerCA 0]
set c1y [lindex $SerCA 1]
set c1z [lindex $SerCA 2]

# C-term Calpha (Tyr).

set c2x [lindex $TyrCA 0]
set c2y [lindex $TyrCA 1]
set c2z [lindex $TyrCA 2]

# force constant (kcal/mol/A^2)
set k 7

# pulling velocity (A/timestep)
set v 0.0005


set outfilename out/0005/$outname\_smd

open $outfilename w

# applica le forze

proc calcforces {} {

  global Tclfreq t k v a1 a2 c1x c1y c1z c2x c2y c2z outfilename

  # get coordinates. contiene le variabili alle quali viene aapplicata la forza

  loadcoords coordinate
  
  # questo viene tenuto fermo da un potenziale immobile intorno alla sua posizione

  set r1 $coordinate($a1)
  set r1x [lindex $r1 0]
  set r1y [lindex $r1 1]
  set r1z [lindex $r1 2]

  # questo viene tirato da una potenziale che si muove a v costante.

  set r2 $coordinate($a2)
  set r2x [lindex $r2 0]
  set r2y [lindex $r2 1]
  set r2z [lindex $r2 2]

  # calcola versore lungo la quale vuoi applicare la forza
  # normalize by hand because vecnorm does not work
  
  set distx [expr [lindex $r2 0] - [lindex $r1 0]]
  set disty [expr [lindex $r2 1] - [lindex $r1 1]]
  set distz [expr [lindex $r2 2] - [lindex $r1 2]]
  set dist  [expr sqrt($distx**2+$disty**2+$distz**2)]

 
  set nx [expr $distx/$dist]
  set ny [expr $disty/$dist]
  set nz [expr $distz/$dist]

  # calcola le forze

  set f1x [expr $k*($c1x-$r1x)]
  set f1y [expr $k*($c1y-$r1y)]
  set f1z [expr $k*($c1z-$r1z)]
  lappend f1 $f1x $f1y $f1z

  set f2x [expr $k*($v*$t*$nx+$c2x-$r2x)]
  set f2y [expr $k*($v*$t*$ny+$c2y-$r2y)]
  set f2z [expr $k*($v*$t*$nz+$c2z-$r2z)]
  lappend f2 $f2x $f2y $f2z

  # apply forces

  addforce $a1 $f1
  addforce $a2 $f2

  # output

  set foo [expr $t % $Tclfreq]
  if { $foo == 0 } {
      set outfile [open $outfilename a]
      set time [expr $t*2/1000.0]
      puts $outfile "$time $r2x $r2y $r2z $f2x $f2y $f2z"
      puts $outfile "$a1"
      close $outfile
  }
  incr t
  return
}

}


run 1500000
